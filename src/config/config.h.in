#pragma once

#define _STRING(s) #s
#define STRING(s) _STRING(s)

#define _LINK_STRING(s1, s2) s1##s2
#define LINK_STRING(s1, s2) _LINK_STRING(s1, s2)

#define MAJOR_VERSION @MAJOR_VERSION@
#define MINOR_VERSION @MINOR_VERSION@
#define REVISION_VERSION @REVISION_VERSION@
#define BUILD_VERSION @BUILD_VERSION@

#define BUILD_TIME @BUILD_TIME@

#define GIT_BRANCH @GIT_BRANCH@
#define GIT_HASH @GIT_HASH@

#if defined(BUILD_VERSION)
    #define SDK_BUILD_VERSION MAJOR_VERSION.MINOR_VERSION.REVISION_VERSION.BUILD_VERSION.GIT_HASH
    #define SDK_VERSION MAJOR_VERSION.MINOR_VERSION.REVISION_VERSION.BUILD_VERSION
#else
    #define SDK_BUILD_VERSION MAJOR_VERSION.MINOR_VERSION.REVISION_VERSION.GIT_HASH
    #define SDK_VERSION MAJOR_VERSION.MINOR_VERSION.REVISION_VERSION
#endif

#define SDK_VERSION_STR STRING(LINK_STRING(v, SDK_VERSION))
#define BUILD_VERSION_STR STRING(LINK_STRING(v, SDK_BUILD_VERSION))

#define COMMON_VERSION sdk VERSION: v
#define COMMON_BUILD_VERSION sdk build VERSION: v

#define PRINT_SDK_VERSION printf(STRING(LINK_STRING(COMMON_VERSION, SDK_VERSION)))
#define PRINT_BUILD_VERSION printf(STRING(LINK_STRING(COMMON_BUILD_VERSION, SDK_BUILD_VERSION)))

#define SHOW_LITERAL(v1, v2) v1 v2

#define PRINT_BUILD_TIME printf(STRING(SHOW_LITERAL(VERSION build in, BUILD_TIME)))
#define PRINT_BRANCH printf(STRING(SHOW_LITERAL(VERSION branch:, GIT_BRANCH)))
#define PRINT_COMMIT printf(STRING(SHOW_LITERAL(VERSION commit id:, GIT_HASH)))